What is a Service in Kubernetes?
 In Kubernetes, a Service is an object that exposes a set of Pods as a network service. It gives a stable way to communicate with Pods, even though Pods can come and go (because they are dynamically created/destroyed).

service Types
=============
1. clusterIP
2. NodePort
3. Load balancer


1. Cluster IP

It is the default type of service in Kubernetes.
It creates a virtual IP address (called ClusterIP) that is only accessible inside the cluster.
This means only other Pods inside the same cluster can talk to this service.

How it works :

1.When you create a service, Kubernetes gives it a ClusterIP (virtual IP).
2.This ClusterIP gets registered in the internal DNS (kube-dns or CoreDNS).
3.So, other Pods can talk to your service using just the service name (no need to remember IP addresses).
4.The kube-proxy running on each node helps in redirecting traffic from this virtual IP to the correct backend Pods.

Example:
apiVersion: v1
kind: Pod
metadata:
  name: javawebapp
  labels:
    app: javawebapp
  namespace: test-ns
spec:
  containers:
  - name: javawebapp
    image: kkeducationb2/java-webapp:1.1
    ports:
    - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
 name: javawebappsvc
 namespace: test-ns
spec:
  type: ClusterIP
  selector:
    app: javawebapp
  ports:
  - port: 80
    targetPort: 8080

Nodeport:
1. NodePort
To access the application externally on a particular Node Port
‚Ä¢ Node Port: Node Port is a port of service which is exposed to the external world. Range of
Nodeport- 30000 ‚Äì 32767
‚Ä¢ Internal Service Port: Service will be expose internally within the cluster through internal
service port. (e.g.: 80)
‚Ä¢ Target Port: Target port is a port on which the application is listening. (e.g.: 80)

Explanation:
‚Ä¢ NodePort exposes the service on a specific port on each node in the cluster.
‚Ä¢ This allows external traffic to access the service by sending requests to the
<NodeIP>:<NodePort>.
‚Ä¢ The port range for NodePort services is typically between 30000-32767.

Use Case Scenario:
‚Ä¢ Direct External Access: If you want to expose a service to be accessible from outside the
cluster but don't have a load balancer, you can use NodePort. For example, if you have a web
application running in a Kubernetes cluster and you want to test it externally, you might use
NodePort to expose it.

Example:
apiVersion: v1
kind: Pod
metadata:
  name: javawebapp
  labels:
    app: javawebapp
  namespace: test-ns
spec:
  containers:
  - name: javawebapp
    image: kkeducationb2/java-webapp:1.1
    ports:
    - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
 name: javawebappsvcnp
 namespace: test-ns
spec:
  type: NodePort
  selector:
    app: javawebapp
  ports:
  - port: 80
    targetPort: 8080

Common Issues & Challenges: ClusterIP
üî∏ Issue 1: Pods can‚Äôt access the service
Cause: Labels on Pods don‚Äôt match service‚Äôs selector.
Troubleshooting:
Check Pod labels: kubectl get pods --show-labels
Check service selector: kubectl describe svc <svc-name>
Check endpoints: kubectl get endpoints <svc-name>
Fix: Match the selector and labels.

Issue 2: DNS resolution not working
Cause: DNS add-on (CoreDNS) is not working.
Troubleshooting:
Ensure coredns pods are running:
kubectl get pods -n kube-system | grep coredns
Run DNS query from Pod:
kubectl exec -it <pod> -- nslookup <svc-name>
Fix:
Restart CoreDNS if needed
Check ConfigMap in kube-system namespace

Common Issues & Challenges: NodePort
üî∏ Issue 1: Can‚Äôt access app from external browser
Cause: NodePort not open in firewall/cloud security groups.
Troubleshooting:
kubectl get svc <svc-name>
Test from curl:
curl http://<NodeIP>:<NodePort>
Fix: Open the NodePort in firewall or security group (30000‚Äì32767)
Issue 2: Node IP not accessible
Cause: You're trying from a machine that can't reach your Node IP.
Fix:
Use a Node with a public IP
Or use LoadBalancer service instead
Q1) You deployed a ClusterIP service, but Pods can‚Äôt access it. What do you check?
Verify service‚Äôs selector matches Pod labels
Check endpoints: kubectl get ep <svc>
Check DNS resolution with: nslookup <svc-name>
Check if Pod is in the same namespace or use full DNS name (svc.namespace.svc.cluster.local)

Q2)Your NodePort service is not accessible from a browser. How do you troubleshoot?
   Verify Node‚Äôs external IP is correct
   Check if NodePort is open in firewall
  Run : curl http://<NodeIP>:<NodePort>
 Check kube-proxy logs
 Ensure Pods are healthy and Ready

Q3) You have a webapp exposed using NodePort. What security concerns might arise?
    Exposes high port numbers (30000‚Äì32767) publicly

No HTTPS by default
No path-based routing
Recommend using Ingress for secured and organized access
Q4)  Why would a ClusterIP service show ‚Äúno endpoints‚Äù?
   Pod not matching label selector
Pod not in Ready state
Pod crashed or was deleted
Check : kubectl get ep <svc>
Q4)Can you access a ClusterIP service from your laptop?
   No. It‚Äôs only accessible inside the cluster.
If you want to access it from outside:
Use kubectl port-forward
Or switch to NodePort or LoadBalancer



| Tool                                        | Use                           |
| ------------------------------------------- | ----------------------------- |
| `kubectl describe svc`                      | Check ports, selectors        |
| `kubectl get endpoints`                     | Confirm matched Pods          |
| `nslookup <svc>`                            | Check DNS inside cluster      |
| `kubectl exec -it <pod> -- curl <svc>:port` | Test from inside              |
| `kube-proxy logs`                           | Check if proxying is working  |
| `firewall-cmd / iptables`                   | Check OS-level network issues |







