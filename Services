What is a Service in Kubernetes?
 In Kubernetes, a Service is an object that exposes a set of Pods as a network service. It gives a stable way to communicate with Pods, even though Pods can come and go (because they are dynamically created/destroyed).

service Types
=============
1. clusterIP
2. NodePort
3. Load balancer


1. Cluster IP

It is the default type of service in Kubernetes.
It creates a virtual IP address (called ClusterIP) that is only accessible inside the cluster.
This means only other Pods inside the same cluster can talk to this service.

How it works :

1.When you create a service, Kubernetes gives it a ClusterIP (virtual IP).
2.This ClusterIP gets registered in the internal DNS (kube-dns or CoreDNS).
3.So, other Pods can talk to your service using just the service name (no need to remember IP addresses).
4.The kube-proxy running on each node helps in redirecting traffic from this virtual IP to the correct backend Pods.

Example:
apiVersion: v1
kind: Pod
metadata:
  name: javawebapp
  labels:
    app: javawebapp
  namespace: test-ns
spec:
  containers:
  - name: javawebapp
    image: kkeducationb2/java-webapp:1.1
    ports:
    - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
 name: javawebappsvc
 namespace: test-ns
spec:
  type: ClusterIP
  selector:
    app: javawebapp
  ports:
  - port: 80
    targetPort: 8080

Nodeport:
1. NodePort
To access the application externally on a particular Node Port
• Node Port: Node Port is a port of service which is exposed to the external world. Range of
Nodeport- 30000 – 32767
• Internal Service Port: Service will be expose internally within the cluster through internal
service port. (e.g.: 80)
• Target Port: Target port is a port on which the application is listening. (e.g.: 80)

Explanation:
• NodePort exposes the service on a specific port on each node in the cluster.
• This allows external traffic to access the service by sending requests to the
<NodeIP>:<NodePort>.
• The port range for NodePort services is typically between 30000-32767.

Use Case Scenario:
• Direct External Access: If you want to expose a service to be accessible from outside the
cluster but don't have a load balancer, you can use NodePort. For example, if you have a web
application running in a Kubernetes cluster and you want to test it externally, you might use
NodePort to expose it.

Example:
apiVersion: v1
kind: Pod
metadata:
  name: javawebapp
  labels:
    app: javawebapp
  namespace: test-ns
spec:
  containers:
  - name: javawebapp
    image: kkeducationb2/java-webapp:1.1
    ports:
    - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
 name: javawebappsvcnp
 namespace: test-ns
spec:
  type: NodePort
  selector:
    app: javawebapp
  ports:
  - port: 80
    targetPort: 8080
