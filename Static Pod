
# Static Pod in Kubernetes

A **Static Pod** in Kubernetes is a type of pod that is directly managed by the **Kubelet** on a specific node, rather than by the Kubernetes control plane or API server. This makes static pods useful for running essential services or components that must always be present on specific nodes.
## Key Characteristics
### 1. Not Managed by Kubernetes Scheduler
Static Pods are not created or controlled by the Kubernetes scheduler. Instead, they are launched and monitored by the Kubelet process on each node.
### 2. Node-Specific
Static Pods are tied to the specific node where their configuration file exists. They will not run on other nodes and cannot be rescheduled automatically to another node if the current one fails.
### 3. Self-Healing (Locally)
If a static pod crashes or is deleted, the Kubelet will automatically recreate it using the same configuration file, as long as that file remains in the specified directory.
### 4. Not Listed via API Server (Directly)
Static pods don't appear in the API server by default. However, they do show up in node descriptions and can be seen using commands like:
kubectl describe node <node-name>
```

## Use Cases for Static Pods
### - Running System-Level Services
Services like log collectors, monitoring agents, or kube-proxy can be run as static pods to ensure they are always present on each node.
### - Control Plane Components
On master nodes, Kubernetes uses static pods to run essential components like:
* `kube-apiserver`
* `kube-controller-manager`
* `kube-scheduler`

### - Node-Specific Applications

If an application or service needs to be pinned to a specific node for hardware access or locality, static pods are a good fit.

--

## How Static Pods Work

### 1. Create a Pod Definition File
Write a YAML or JSON file with the pod's specifications.
### 2. Save It in the Static Pod Directory
Place this file in a specific directory (usually `/etc/kubernetes/manifests/`) that the Kubelet watches.
### 3. Kubelet Detects and Creates Pod
The Kubelet automatically creates or updates the pod based on the file. If the file changes, the pod is updated. If the file is deleted, the pod is removed.
### 4. Pod Lifecycle Managed by Kubelet
Only the Kubelet handles the lifecycle of the pod—not the API server or any controller.
---

## Example: Creating a Static Pod

### Step 1: Create YAML File (e.g., `nginx-static-pod.yaml`)

```yaml
apiVersion: v1
kind: Pod
metadata:
  name: nginx-static
  labels:
    app: nginx
spec:
  containers:
  - name: nginx
    image: nginx:latest
    ports:
    - containerPort: 80
```

### Step 2: Move the File
Place it in the Kubelet's watch directory:
sudo mv nginx-static-pod.yaml /etc/kubernetes/manifests/
### Step 3: Verify the Pod

kubectl get pods --all-namespaces
kubectl describe node <node-name>

### Step 4: Pod Lifecycle

If the pod crashes or is manually deleted, the Kubelet will automatically restart it. If the file is removed, the pod will be terminated.


## Advantages of Static Pods

1. **Self-Healing:** Automatically restarted by Kubelet if they fail.
2. **Node-Specific Control:** Great for services that should run only on certain nodes.
3. **Lightweight:** No controller overhead, quick to set up.

---

## Disadvantages of Static Pods

1. **No Scheduling Control:** Not handled by the Kubernetes scheduler.
2. **Not Scalable:** Cannot use tools like ReplicaSet or Deployment for management.
3. **Limited Visibility:** Don’t appear in standard `kubectl get pods` output unless checked via node.

---

## Troubleshooting Tips

* **Pod Not Appearing?**

  * Check if the YAML file is valid.
  * Confirm it's placed in the correct directory (`/etc/kubernetes/manifests/`).
  * Check Kubelet logs: `journalctl -u kubelet`

* **YAML Syntax Issues?**

  * Use `kubectl apply --dry-run=client -f <file>` to validate.

* **Pod Keeps Restarting?**

  * Check container logs: `kubectl logs <pod-name>`
  * Check if the image or configuration has issues.

---

## Final Notes

* Static pods are mostly used for critical, node-specific or infrastructure-related services.
* They are ideal in scenarios where high-level Kubernetes management is unnecessary or undesired.
* They're simple to configure but should be used wisely, especially in large clusters where central control and automation are important.
